minispade.register('ember-formbuilder/~tests/helpers/fields_for_test', "(function() {(function() {\n  var appendView, object, view;\n\n  view = null;\n\n  object = null;\n\n  Ember.FormBuilder.AddAssociation.reopen({\n    tagName: 'span'\n  });\n\n  Ember.FormBuilder.RemoveAssociation.reopen({\n    tagName: 'span'\n  });\n\n  appendView = function() {\n    return Ember.run(function() {\n      return view.appendTo('#qunit-fixture');\n    });\n  };\n\n  module(\"fieldsFor Helper\", {\n    setup: function() {\n      object = Ember.Object.create({\n        books: Ember.ArrayProxy.create({\n          content: [\n            Ember.Object.create({\n              title: 'Book #1'\n            }), Ember.Object.create({\n              title: 'Book #2'\n            })\n          ]\n        })\n      });\n      view = Ember.View.create({\n        template: Ember.Handlebars.compile('\\\n        <section>\\\n          {{#formFor \"object\"}}\\\n            {{#fieldsFor \"books\"}}\\\n              {{input \"title\"}}\\\n              {{removeAssociation \"books\" text=\"Remove Book\" classes=\"btn btn-danger\"}}\\\n            {{/fieldsFor}}\\\n            {{addAssociation \"books\" objectClass=\"Ember.Object\" text=\"Add Book\" classes=\"btn btn-success\"}}\\\n          {{/formFor}}\\\n        </section>\\\n      ')\n      });\n      view.set('object', object);\n      return appendView();\n    },\n    teardown: function() {\n      if (view) view.destroy();\n      if (object) return object.destroy();\n    }\n  });\n\n  test(\"inputs\", function() {\n    return ok(view.$('form div input').length === 2, \"should have 2 nested divs\");\n  });\n\n  test(\"bindings\", function() {\n    ok(view.$('form div input').first().val() === 'Book #1', \"values bind to correct child\");\n    ok(view.$('form div input').last().val() === 'Book #2', \"values bind to correct child\");\n    Ember.run(function() {\n      var books;\n      books = object.get('books');\n      books.objectAt(0).set('title', 'Changed #1');\n      return books.pushObject(Ember.Object.create({\n        title: 'Book #3'\n      }));\n    });\n    ok(view.$('form div input').length === 3, \"should have 3 nested divs\");\n    ok(view.$('form div input').first().val() === 'Changed #1', \"values bind to correct child\");\n    return ok(view.$('form div input').last().val() !== 'Changed #1', \"values DOESNT bind to wrong child\");\n  });\n\n  test(\"add associations\", function() {\n    var link;\n    link = view.$('form span').last();\n    ok(link.hasClass('btn-success'), \"should have the class specified\");\n    ok(link.text() === 'Add Book', \"should have a link to add association\");\n    Ember.run(function() {\n      return Ember.View.views[link.attr('id')].click();\n    });\n    return ok(view.$('form div input').length === 3, \"should have 3 nested divs\");\n  });\n\n  test(\"remove associations\", function() {\n    var link;\n    link = view.$('form span').first();\n    ok(link.hasClass('btn-danger'), \"should have the class specified\");\n    ok(link.text() === 'Remove Book', \"should have a link to remove association\");\n    Ember.run(function() {\n      return Ember.View.views[link.attr('id')].click();\n    });\n    return ok(view.$('form div input').length === 1, \"should have 1 nested divs\");\n  });\n\n}).call(this);\n})();\n//@ sourceURL=ember-formbuilder/~tests/helpers/fields_for_test");minispade.register('ember-formbuilder/~tests/helpers/form_for_test', "(function() {(function() {\n  var appendView, object, view;\n\n  view = null;\n\n  object = null;\n\n  appendView = function() {\n    return Ember.run(function() {\n      return view.appendTo('#qunit-fixture');\n    });\n  };\n\n  module(\"formFor Helper\", {\n    setup: function() {\n      object = Ember.Object.create();\n      view = Ember.View.create({\n        template: Ember.Handlebars.compile('\\\n        <section>\\\n          {{#formFor \"object\"}}\\\n            {{input \"name\" label=\"cebolas\"}}\\\n          {{/formFor}}\\\n          \\\n          <span id=\"name\">{{object.name}}</span>\\\n        </section>\\\n      ')\n      });\n      view.set('object', object);\n      return appendView();\n    },\n    teardown: function() {\n      if (view) view.destroy();\n      if (object) return object.destroy();\n    }\n  });\n\n  test(\"basic formFor call for object\", function() {\n    return ok(/<section>.*<form.*<\\/section>.*/.test(view.$().html()), \"form should be correctly set\");\n  });\n\n  test(\"input label\", function() {\n    ok(view.$('form label').text().trim() === 'Name', \"should have default label\");\n    return ok(view.$('form label').attr('for') === view.$('form input').attr('id'), \"should be for the given input\");\n  });\n\n  test(\"inputs with bindings\", function() {\n    ok(/<section>.*<form.*<\\/section>.*/.test(view.$().html()), \"form should be correctly set\");\n    ok(view.$('form input').length > 0, \"should have inputs\");\n    Ember.run(function() {\n      return object.set('name', 'My Name');\n    });\n    ok(view.$('form input').val() === 'My Name', \"bindings should be bound\");\n    Ember.run(function() {\n      ok(view.$('form input').val('Changed Again'));\n      return Ember.View.views[view.$('form input').attr('id')].change();\n    });\n    ok(object.get('name') === 'Changed Again', \"bindings should be bound both sides\");\n    return ok($('#name').text() === 'Changed Again', \"binds to all instances\");\n  });\n\n}).call(this);\n})();\n//@ sourceURL=ember-formbuilder/~tests/helpers/form_for_test");minispade.register('ember-formbuilder/~tests/unit/form_test', "(function() {(function() {\n  var appendView, form, get, getPath, set;\n\n  get = Ember.get;\n\n  set = Ember.set;\n\n  getPath = Ember.getPath;\n\n  form = null;\n\n  appendView = function(v) {\n    return Ember.run(function() {\n      return v.appendTo('#qunit-fixture');\n    });\n  };\n\n  module(\"Ember.FormBuilder.Form\", {\n    setup: function() {\n      return form = Ember.FormBuilder.Form.create();\n    },\n    teardown: function() {\n      return form = null;\n    }\n  });\n\n  test(\"can have a property set on it\", function() {\n    set(form, 'name', 'bar');\n    return equal(get(form, 'name'), 'bar', \"property was set on the form\");\n  });\n\n  test(\"generates a form tag\", function() {\n    return ok(form.tagName === 'form', \"should have inserted a form tag.\");\n  });\n\n  test(\"displays children when template has them\", function() {\n    set(form, 'template', Handlebars.compile(\"<input type=\\\"text\\\" /><input type=\\\"text\\\" />\"));\n    appendView(form);\n    return ok(form.$().find('input').length === 2, \"should have children.\");\n  });\n\n  test(\"has the class names specified\", function() {\n    var classes, cls, _i, _len, _ref, _results;\n    classes = 'form-horizontal class1 class2';\n    set(form, 'classes', classes);\n    appendView(form);\n    _ref = classes.split(' ');\n    _results = [];\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      cls = _ref[_i];\n      _results.push(ok(form.$().hasClass(cls), \"form should have class \" + cls));\n    }\n    return _results;\n  });\n\n}).call(this);\n})();\n//@ sourceURL=ember-formbuilder/~tests/unit/form_test");minispade.register('ember-formbuilder/~tests/unit/input_test', "(function() {(function() {\n  var appendView, input,\n    __indexOf = Array.prototype.indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  input = null;\n\n  appendView = function(v) {\n    return Ember.run(function() {\n      return v.appendTo('#qunit-fixture');\n    });\n  };\n\n  module(\"Ember.FormBuilder.Input\", {\n    setup: function() {\n      return input = Ember.FormBuilder.Input.create();\n    },\n    teardown: function() {\n      return input = null;\n    }\n  });\n\n  test(\"be set under the appropriate default wrapper\", function() {\n    var cls, tag;\n    tag = Ember.FormBuilder.wrapperTag;\n    if (tag) ok(input.tagName === tag);\n    appendView(input);\n    cls = Ember.FormBuilder.wrapperClass;\n    if (cls) return ok(input.$().hasClass(cls), \"should have class \" + cls);\n  });\n\n  test(\"be set under the appropriate custom wrapper\", function() {\n    var cls, tag;\n    tag = 'span';\n    input.set('tagName', tag);\n    cls = 'custom';\n    input.set('wrapperClass', cls);\n    if (tag) ok(input.tagName === tag);\n    appendView(input);\n    if (cls) return ok(input.$().hasClass(cls), \"should have class \" + cls);\n  });\n\n  test(\"have the input wrapper\", function() {\n    appendView(input);\n    return ok(input.$().find(Ember.FormBuilder.inputWrapperTag).hasClass(Ember.FormBuilder.inputWrapperClass));\n  });\n\n  test(\"generates aa input tag\", function() {\n    appendView(input);\n    return ok(input.$('input').length === 1);\n  });\n\n  test(\"binds value correctly\", function() {\n    var o;\n    o = Ember.Object.create();\n    Ember.run(function() {\n      appendView(input);\n      return input.set('value', 'test');\n    });\n    return ok(input.$('input').val() === 'test');\n  });\n\n  test(\"has a label\", function() {\n    appendView(input);\n    return ok(input.$('label').length === 1);\n  });\n\n  test(\"does not have a label when i dont want to\", function() {\n    input.set('showLabel', false);\n    appendView(input);\n    return ok(input.$('label').length === 0);\n  });\n\n  test(\"shows errors and hints\", function() {\n    var errorSelector, hintSelector;\n    input.set('error', \"must me valid\");\n    input.set('hint', \"test@example.com\");\n    appendView(input);\n    errorSelector = \"\" + Ember.FormBuilder.errorTag + \".\" + Ember.FormBuilder.errorClass;\n    ok(input.$(errorSelector).length === 1);\n    ok(input.$(errorSelector).text() === \"must me valid\");\n    ok(input.$().hasClass('error'));\n    hintSelector = \"\" + Ember.FormBuilder.helpTag + \".\" + Ember.FormBuilder.helpClass;\n    ok(input.$(hintSelector).length === 1);\n    return __indexOf.call(input.$(hintSelector).text(), ok) >= 0 === \"test@example.com\";\n  });\n\n  test(\"works for textarea\", function() {\n    input = Ember.FormBuilder.Input.create({\n      inputView: 'Ember.TextArea'\n    });\n    appendView(input);\n    return ok(input.$('textarea').length === 1);\n  });\n\n  test(\"works for checkbox\", function() {\n    input = Ember.FormBuilder.Input.create({\n      inputView: 'Ember.Checkbox'\n    });\n    appendView(input);\n    return ok(input.$('input[type=checkbox]').length === 1);\n  });\n\n}).call(this);\n})();\n//@ sourceURL=ember-formbuilder/~tests/unit/input_test");