minispade.register('ember-formbuilder/~tests/helpers/fields_for_test', "(function() {(function() {\n  var appendView, object, view;\n\n  view = null;\n\n  object = null;\n\n  appendView = function() {\n    return Ember.run(function() {\n      return view.appendTo('#qunit-fixture');\n    });\n  };\n\n  module(\"fieldsFor Helper\", {\n    setup: function() {\n      var objects;\n      objects = [];\n      object = Ember.Object.create({\n        books: Ember.ArrayProxy.create({\n          content: [\n            Ember.Object.create({\n              title: 'Book #1'\n            }), Ember.Object.create({\n              title: 'Book #2'\n            })\n          ]\n        })\n      });\n      view = Ember.View.create({\n        template: Ember.Handlebars.compile('\\\n        <section>\\\n          {{#formFor \"object\"}}\\\n            {{#fieldsFor \"books\"}}\\\n              {{input \"title\"}}\\\n              {{removeAssociation \"books\" text=\"Remove Book\" classes=\"btn btn-danger\"}}\\\n            {{/fieldsFor}}\\\n            {{addAssociation \"books\" objectClass=\"Ember.Object\" text=\"Add Book\" classes=\"btn btn-success\"}}\\\n          {{/formFor}}\\\n        </section>\\\n      ')\n      });\n      view.set('object', object);\n      return appendView();\n    },\n    teardown: function() {\n      if (view) view.destroy();\n      if (object) return object.destroy();\n    }\n  });\n\n  test(\"inputs\", function() {\n    return equal(view.$('form div input').length, 2, \"should have 2 nested divs\");\n  });\n\n  test(\"bindings\", function() {\n    equal(view.$('form div input').first().val(), 'Book #1', \"values bind to correct child\");\n    equal(view.$('form div input').last().val(), 'Book #2', \"values bind to correct child\");\n    Ember.run(function() {\n      var books;\n      books = object.get('books');\n      books.objectAt(0).set('title', 'Changed #1');\n      return books.pushObject(Ember.Object.create({\n        title: 'Book #3'\n      }));\n    });\n    equal(view.$('form div input').length, 3, \"should have 3 nested divs\");\n    equal(view.$('form div input').first().val(), 'Changed #1', \"values bind to correct child\");\n    return notEqual(view.$('form div input').last().val(), 'Changed #1', \"values DOESNT bind to wrong child\");\n  });\n\n  test(\"add associations\", function() {\n    var link;\n    link = view.$('form a').last();\n    ok(link.hasClass('btn-success'), \"should have the class specified\");\n    ok(link.text() === 'Add Book', \"should have a link to add association\");\n    Ember.run(function() {\n      return Ember.View.views[link.attr('id')].click();\n    });\n    return equal(view.$('form div input').length, 3, \"should have 3 nested divs\");\n  });\n\n  test(\"remove associations\", function() {\n    var link;\n    link = view.$('form a').first();\n    ok(link.hasClass('btn-danger'), \"should have the class specified\");\n    equal(link.text(), 'Remove Book', \"should have a link to remove association\");\n    Ember.run(function() {\n      return Ember.View.views[link.attr('id')].click();\n    });\n    return equal(view.$('form div input').length, 1, \"should have 1 nested divs\");\n  });\n\n  test(\"should accepted has_one association\", function() {\n    return ok(false);\n  });\n\n}).call(this);\n})();\n//@ sourceURL=ember-formbuilder/~tests/helpers/fields_for_test");minispade.register('ember-formbuilder/~tests/helpers/form_for_test', "(function() {(function() {\n  var appendView, object, view;\n\n  view = null;\n\n  object = null;\n\n  appendView = function() {\n    return Ember.run(function() {\n      return view.appendTo('#qunit-fixture');\n    });\n  };\n\n  module(\"formFor Helper\", {\n    setup: function() {\n      object = Ember.Object.create();\n      view = Ember.View.create({\n        template: Ember.Handlebars.compile('\\\n        <section>\\\n          {{#formFor \"object\" classes=\"form-horizontal\"}}\\\n            {{input \"name\"}}\\\n            {{submit \"Save\"}}\\\n            {{cancel \"Cancel\"}}\\\n          {{/formFor}}\\\n\\\n          <span id=\"name\">{{object.name}}</span>\\\n        </section>\\\n      '),\n        objectSubmit: function() {\n          return this.set('submitFired', true);\n        },\n        objectCancel: function() {\n          return this.set('cancelFired', true);\n        }\n      });\n      view.set('object', object);\n      return appendView();\n    },\n    teardown: function() {\n      if (view) view.destroy();\n      if (object) return object.destroy();\n    }\n  });\n\n  test(\"basic formFor call for object\", function() {\n    return ok(/<section>.*<form.*<\\/section>.*/.test(view.$().html()), \"form should be correctly set\");\n  });\n\n  test(\"form classes is set\", function() {\n    return ok(view.$('form').hasClass('form-horizontal'));\n  });\n\n  test(\"submit and cancel looks like they should\", function() {\n    var cancel, submit;\n    submit = view.$('form .submit-button');\n    cancel = view.$('form .cancel-button');\n    ok(submit.hasClass('btn btn-success'), 'submit classes');\n    ok(cancel.hasClass('btn btn-danger'), 'cancel classes');\n    equal(submit.get(0).tagName.toLowerCase(), 'button', 'submit tagName');\n    return equal(cancel.get(0).tagName.toLowerCase(), 'a', 'cancel tagName');\n  });\n\n  test(\"submit fires event on the parent view\", function() {\n    var submit;\n    submit = view.$('form .submit-button');\n    Ember.run(function() {\n      return Ember.View.views[submit.attr('id')].click();\n    });\n    return ok(view.submitFired != null);\n  });\n\n  test(\"cancel fires event on the parent view\", function() {\n    var cancel;\n    cancel = view.$('form .cancel-button');\n    Ember.run(function() {\n      return Ember.View.views[cancel.attr('id')].click();\n    });\n    return ok(view.cancelFired != null);\n  });\n\n  test(\"input label\", function() {\n    equal(view.$('form label').text().trim(), 'Name', \"should have default label\");\n    return equal(view.$('form label').attr('for'), view.$('form input').attr('id'), \"should be for the given input\");\n  });\n\n  test(\"inputs with bindings\", function() {\n    ok(/<section>.*<form.*<\\/section>.*/.test(view.$().html()), \"form should be correctly set\");\n    ok(view.$('form input').length > 0, \"should have inputs\");\n    Ember.run(function() {\n      return object.set('name', 'My Name');\n    });\n    ok(view.$('form input').val() === 'My Name', \"bindings should be bound\");\n    Ember.run(function() {\n      ok(view.$('form input').val('Changed Again'));\n      return Ember.View.views[view.$('form input').attr('id')].change();\n    });\n    ok(object.get('name') === 'Changed Again', \"bindings should be bound both sides\");\n    return ok($('#name').text() === 'Changed Again', \"binds to all instances\");\n  });\n\n  test(\"select tag\", function() {\n    var people;\n    people = Ember.ArrayProxy.create([\n      {\n        id: 1,\n        firstName: 'Yehuda'\n      }, {\n        id: 1,\n        firstName: 'Yehuda'\n      }\n    ]);\n    object = Ember.Object.create();\n    view = Ember.View.create({\n      people: people,\n      object: object,\n      template: Ember.Handlebars.compile('\\\n        <section>\\\n          {{#formFor \"object\" classes=\"form-horizontal\"}}\\\n            {{input \"person\" as=\"select\" collectionBinding=\"people\" prompt=\"Please select\"}}\\\n          {{/formFor}}\\\n        </section>\\\n    ')\n    });\n    appendView();\n    console.log(view.$(\"form select\"));\n    ok(view.$(\"form select\").length > 0, \"should have select tag\");\n    equal(view.$(\"form select\").val(), 'Please select', \"By default, the prompt is selected in the DOM\");\n    return equal(view.$(\"form select\").find('option').length, 2, \"Options were rendered\");\n  });\n\n}).call(this);\n})();\n//@ sourceURL=ember-formbuilder/~tests/helpers/form_for_test");minispade.register('ember-formbuilder/~tests/helpers/mixin', "(function() {(function() {\n  var Custom, appendView, object, view;\n\n  view = null;\n\n  object = null;\n\n  Custom = Ember.Mixin.create({\n    wrapperTag: 'section',\n    wrapperClass: 'custom-group',\n    inputWrapperTag: 'span',\n    inputWrapperClass: 'custom-controls',\n    labelClass: 'custom-label',\n    helpTag: 'span',\n    helpClass: 'help',\n    errorTag: 'p',\n    errorClass: 'error',\n    formClass: 'form',\n    submitClass: 'submit',\n    cancelClass: 'cancel'\n  });\n\n  appendView = function() {\n    return Ember.run(function() {\n      return view.appendTo('#qunit-fixture');\n    });\n  };\n\n  module(\"formFor Helper with mixins\", {\n    setup: function() {\n      object = Ember.Object.create();\n      Ember.FormBuilder.pushMixin(Custom, 'custom');\n      view = Ember.View.create({\n        template: Ember.Handlebars.compile('\\\n        <section>\\\n          {{#formFor \"object\" mixin=\"custom\"}}\\\n            {{input \"name\" hint=\"my hint\" error=\"my error\"}}\\\n          {{/formFor}}\\\n          \\\n          <span id=\"name\">{{object.name}}</span>\\\n        </section>\\\n      ')\n      });\n      view.set('object', object);\n      return appendView();\n    },\n    teardown: function() {\n      if (view) view.destroy();\n      if (object) return object.destroy();\n    }\n  });\n\n  test(\"mixin properties\", function() {\n    ok(view.$('form').hasClass('form'), \"form class\");\n    ok(view.$('form section.custom-group').length > 0, \"wrapper tag\");\n    ok(view.$('form section.custom-group span.custom-controls').length > 0, \"input wrapper tag\");\n    ok(view.$('form section.custom-group label.custom-label').length > 0, \"has a label\");\n    ok(view.$('form section.custom-group span.help').text().trim() === 'my hint', \"hint with class\");\n    return ok(view.$('form section.custom-group p.error').text().trim() === 'my error', \"error with class\");\n  });\n\n}).call(this);\n})();\n//@ sourceURL=ember-formbuilder/~tests/helpers/mixin");minispade.register('ember-formbuilder/~tests/translations', "(function() {(function() {\n  var appendView, object, view;\n\n  view = null;\n\n  object = null;\n\n  appendView = function() {\n    return Ember.run(function() {\n      return view.appendTo('#qunit-fixture');\n    });\n  };\n\n  module(\"translations\", {\n    setup: function() {\n      object = Ember.Object.create();\n      view = Ember.View.create({\n        template: Ember.Handlebars.compile('\\\n        <section>\\\n          {{#formFor \"object\" classes=\"form-horizontal\"}}\\\n            {{input \"name\"}}\\\n\\\n            {{submit}}\\\n            {{cancel}}\\\n          {{/formFor}}\\\n          \\\n          <span id=\"name\">{{object.name}}</span>\\\n        </section>\\\n      ')\n      });\n      return view.set('object', object);\n    },\n    teardown: function() {\n      Ember.FormBuilder.STRINGS = {};\n      if (view) view.destroy();\n      if (object) return object.destroy();\n    }\n  });\n\n  test(\"translates attributes correctly with custom values\", function() {\n    Ember.FormBuilder.STRINGS = {\n      defaults: {\n        labels: {\n          name: 'Your name'\n        },\n        hints: {\n          name: 'Full name'\n        },\n        placeholders: {\n          name: 'Type your full name'\n        },\n        submit: 'Submit',\n        cancel: 'Cancel'\n      },\n      object: {\n        labels: {\n          name: 'Type your name:'\n        },\n        hints: {\n          name: 'The name of yours'\n        },\n        placeholders: {\n          name: 'Naaaame'\n        },\n        submit: 'Send',\n        cancel: 'Reset'\n      }\n    };\n    appendView();\n    equal(view.$('form label').text().trim(), 'Type your name:');\n    equal(view.$('form .help-block').text().trim(), 'The name of yours');\n    equal(view.$('form input').attr('placeholder').trim(), 'Naaaame');\n    equal(view.$('form .submit-button').text().trim(), 'Send');\n    return equal(view.$('form .cancel-button').text().trim(), 'Reset');\n  });\n\n  test(\"translates attributes correctly with default values\", function() {\n    Ember.FormBuilder.STRINGS = {\n      defaults: {\n        labels: {\n          name: 'Your name'\n        },\n        hints: {\n          name: 'Full name'\n        },\n        placeholders: {\n          name: 'Type your full name'\n        },\n        submit: 'Submit'\n      }\n    };\n    appendView();\n    equal(view.$('form label').text().trim(), 'Your name');\n    equal(view.$('form .help-block').text().trim(), 'Full name');\n    equal(view.$('form input').attr('placeholder').trim(), 'Type your full name');\n    equal(view.$('form .submit-button').text().trim(), 'Submit');\n    return equal(view.$('form .cancel-button').text().trim(), 'Cancel');\n  });\n\n}).call(this);\n})();\n//@ sourceURL=ember-formbuilder/~tests/translations");