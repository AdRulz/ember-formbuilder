minispade.register('ember-formbuilder/~tests/unit/form_test', "(function() {(function() {\n  var appendView, form, get, getPath, set;\n\n  get = Ember.get;\n\n  set = Ember.set;\n\n  getPath = Ember.getPath;\n\n  form = null;\n\n  appendView = function(v) {\n    return Ember.run(function() {\n      return v.appendTo('#qunit-fixture');\n    });\n  };\n\n  module(\"Ember.FormBuilder.Form\", {\n    setup: function() {\n      return form = Ember.FormBuilder.Form.create();\n    },\n    teardown: function() {\n      return form = null;\n    }\n  });\n\n  test(\"can have a property set on it\", function() {\n    set(form, 'name', 'bar');\n    return equal(get(form, 'name'), 'bar', \"property was set on the form\");\n  });\n\n  test(\"generates a form tag\", function() {\n    return ok(form.tagName === 'form', \"should have inserted a form tag.\");\n  });\n\n  test(\"displays children when template has them\", function() {\n    set(form, 'template', Handlebars.compile(\"<input type=\\\"text\\\" /><input type=\\\"text\\\" />\"));\n    appendView(form);\n    return ok(form.$().find('input').length === 2, \"should have children.\");\n  });\n\n  test(\"has the class names specified\", function() {\n    var classes, cls, _i, _len, _ref, _results;\n    classes = 'form-horizontal class1 class2';\n    set(form, 'classes', classes);\n    appendView(form);\n    _ref = classes.split(' ');\n    _results = [];\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      cls = _ref[_i];\n      _results.push(ok(form.$().hasClass(cls), \"form should have class \" + cls));\n    }\n    return _results;\n  });\n\n}).call(this);\n})();\n//@ sourceURL=ember-formbuilder/~tests/unit/form_test");