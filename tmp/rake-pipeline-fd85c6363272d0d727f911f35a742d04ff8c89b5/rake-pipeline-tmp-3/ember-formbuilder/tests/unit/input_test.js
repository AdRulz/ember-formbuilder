minispade.register('ember-formbuilder/~tests/unit/input_test', "(function() {(function() {\n  var appendView, get, getPath, input, set,\n    __indexOf = Array.prototype.indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  get = Ember.get;\n\n  set = Ember.set;\n\n  getPath = Ember.getPath;\n\n  input = null;\n\n  appendView = function(v) {\n    return Ember.run(function() {\n      return v.appendTo('#qunit-fixture');\n    });\n  };\n\n  module(\"Ember.FormBuilder.Input\", {\n    setup: function() {\n      return input = Ember.FormBuilder.Input.create();\n    },\n    teardown: function() {\n      return input = null;\n    }\n  });\n\n  test(\"be set under the appropriate default wrapper\", function() {\n    var cls, tag;\n    tag = Ember.FormBuilder.wrapperTag;\n    if (tag) ok(input.tagName === tag);\n    appendView(input);\n    cls = Ember.FormBuilder.wrapperClass;\n    if (cls) return ok(input.$().hasClass(cls), \"should have class \" + cls);\n  });\n\n  test(\"be set under the appropriate custom wrapper\", function() {\n    var cls, tag;\n    tag = 'span';\n    input.set('tagName', tag);\n    cls = 'custom';\n    input.set('wrapperClass', cls);\n    if (tag) ok(input.tagName === tag);\n    appendView(input);\n    if (cls) return ok(input.$().hasClass(cls), \"should have class \" + cls);\n  });\n\n  test(\"have the input wrapper\", function() {\n    appendView(input);\n    return ok(input.$().find(Ember.FormBuilder.inputWrapperTag).hasClass(Ember.FormBuilder.inputWrapperClass));\n  });\n\n  test(\"generates aa input tag\", function() {\n    appendView(input);\n    return ok(input.$('input').length === 1);\n  });\n\n  test(\"binds value correctly\", function() {\n    var myValue;\n    myValue = \"\";\n    input.set('valueBinding', 'myValue');\n    appendView(input);\n    input.$('input').val('test');\n    input.inputView.change();\n    return setTimeout(200, function() {\n      console.log(myValue);\n      return ok(myValue === 'test');\n    });\n  });\n\n  test(\"has a label\", function() {\n    appendView(input);\n    return ok(input.$('label').length === 1);\n  });\n\n  test(\"does not have a label when i dont want to\", function() {\n    input.set('showLabel', false);\n    appendView(input);\n    return ok(input.$('label').length === 0);\n  });\n\n  test(\"shows errors and hints\", function() {\n    var errorSelector, hintSelector;\n    input.set('error', \"must me valid\");\n    input.set('hint', \"test@example.com\");\n    appendView(input);\n    errorSelector = \"\" + Ember.FormBuilder.errorTag + \".\" + Ember.FormBuilder.errorClass;\n    ok(input.$(errorSelector).length === 1);\n    ok(input.$(errorSelector).text() === \"must me valid\");\n    ok(input.$().hasClass('error'));\n    hintSelector = \"\" + Ember.FormBuilder.helpTag + \".\" + Ember.FormBuilder.helpClass;\n    ok(input.$(hintSelector).length === 1);\n    return __indexOf.call(input.$(hintSelector).text(), ok) >= 0 === \"test@example.com\";\n  });\n\n  test(\"works for textarea\", function() {\n    input.set('inputViewClass', Ember.TextArea);\n    appendView(input);\n    return ok(input.$('textarea').length === 1);\n  });\n\n  test(\"works for checkbox\", function() {\n    input.set('inputViewClass', Ember.Checkbox);\n    appendView(input);\n    return ok(input.$('input[type=checkbox]').length === 1);\n  });\n\n}).call(this);\n})();\n//@ sourceURL=ember-formbuilder/~tests/unit/input_test");